{"version":3,"file":"static/js/366.333061dd.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/UpdateForm/UpdateForm.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","pages/ContactsPage.jsx"],"sourcesContent":["\n// import PropTypes from 'prop-types';\nimport { Flex } from '@chakra-ui/layout';\nimport { Input, InputGroup, InputLeftAddon } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { filterChange } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onWrite = e => {\n    dispatch(filterChange(e.currentTarget.value));\n  };\n\n  return (\n    <Flex>\n      <InputGroup>\n        <InputLeftAddon children=\"Find contacts :\" fontSize=\"1em\" />\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contacts by name\"\n          onChange={onWrite}\n          fontSize=\"1em\"\n          mb={2}\n        />\n      </InputGroup>\n    </Flex>\n  );\n};\n\n// Label.propTypes = {\n//   filter: PropTypes.string,\n// };\n","import React from \"react\";\nimport {\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n} from \"@chakra-ui/react\";\n\nexport function UpdateForm({\n  handleUpdate,\n  updatedName,\n  updatedNumber,\n  handleChange,\n  onClose,\n}) {\n  return (\n    <>\n      <Stack as=\"form\" spacing={2} onSubmit={handleUpdate} mb={4}>\n        <ModalHeader>Update your contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <InputGroup>\n            <InputLeftAddon children=\"Name:\" w=\"5.2rem\" fontSize=\"1em\" />\n            <Input\n              type=\"text\"\n              name=\"name\"\n              value={updatedName}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Only letters, apostrophe, dash and spaces.\"\n              required\n              placeholder=\"Enter name\"\n              w=\"17rem\"\n              fontSize=\"1em\"\n              onChange={handleChange}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputLeftAddon children=\"Number:\" w=\"5.2rem\" fontSize=\"1em\" />\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              value={updatedNumber}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              placeholder=\"Enter phone number\"\n              w=\"17rem\"\n              fontSize=\"1em\"\n              onChange={handleChange}\n            />\n          </InputGroup>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} type=\"submit\">\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </Stack>\n    </>\n  );\n}\n","import {\n  Button,\n  Text,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  Flex,\n} from \"@chakra-ui/react\";\nimport React, { useState, useRef } from \"react\";\nimport { BsTrash, BsFillPencilFill } from \"react-icons/bs\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact, updateContact } from \"../../redux/contacts/operations\";\nimport { showSuccessToast } from '../../utils/messages';\n\nimport { UpdateForm } from '../UpdateForm/UpdateForm';\n\nexport const ContactsListItem = ({ contact: { name, number, id }, contacts }) => {\n  // console.log(\"contact\", name, number, id);\n  // console.log('contacts', contacts)\n\n  const initialRef = useRef(null);\n  const finalRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [updatedName, setUpdatedName] = useState(name);\n  const [updatedNumber, setUpdatedNumber] = useState(number);\n\n  const onOpen = () => setIsOpen(true);\n  const onClose = () => setIsOpen(false);\n\n  const dispatch = useDispatch();\n\n  const deleteContactHandler = () => {\n    // console.log('id', id)\n    dispatch(deleteContact(id));\n    showSuccessToast(`Contact: ${name} is deleted`)\n  };\n\n  const handleUpdate = (event) => {\n    event.preventDefault();\n    // console.log(\"click on save\");\n    const form = event.target;\n    dispatch(\n      updateContact({\n        id: id,\n        contact: {\n          name: form.name.value,\n          number: form.number.value,\n        },\n      })\n    );\n\n    showSuccessToast(`Contact: ${name} is updated`)\n    form.reset();\n    onClose();\n  };\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\": \n        setUpdatedName(value);\n        break;\n      case \"number\":\n        setUpdatedNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Flex alignItems=\"center\">\n        <Text\n          ml={\"5%\"}\n          mr={\"auto\"}\n          fontSize={{ md: \"lg\", lg: \"lg\" }}\n          fontWeight={\"500\"}\n        >\n          {name}\n        </Text>\n        <Text\n          ml={\"auto\"}\n          mr={\"5%\"}\n          fontWeight={\"500\"}\n          fontSize={{ md: \"lg\", lg: \"lg\" }}\n        >\n          {number}\n        </Text>\n\n        <Button onClick={onOpen}>\n          <BsFillPencilFill size={20} color=\"var(--chakra-colors-blue-500)\" />\n        </Button>\n\n        <Button onClick={deleteContactHandler} color=\"#f44336\">\n          <BsTrash size={20} />\n        </Button>\n\n\n        <Modal\n          initialFocusRef={initialRef}\n          finalFocusRef={finalRef}\n          isOpen={isOpen}\n          onClose={onClose}\n        >\n          <ModalOverlay />\n\n          <ModalContent>\n            <UpdateForm\n             updatedName={updatedName}\n             updatedNumber={updatedNumber}\n             handleUpdate={handleUpdate}\n             handleChange={handleChange}\n             onClose={onClose}\n\n            />\n          </ModalContent>\n\n      </Modal>\n    </Flex>\n    </>\n  );\n};\n","import React from 'react';\nimport { List } from '@chakra-ui/react';\nimport { ContactsListItem } from '../ContactsListItem/ContactsListItem';\n\n\nexport const ContactsList = ( { contacts } ) => {\n\n  return (\n    <>\n      <List spacing={2} w={{ base: '384px', lg: '450px' }}>\n        {contacts.map(({ id, name, number }) => (\n          <ContactsListItem key={id} w=\"100%\" display=\"flex\" alignItems=\"center\" contact = {{ id, name, number }} contacts={contacts} />\n        ))}\n      </List>\n    </>\n  );\n};","import { createSelector } from 'reselect';\n\nexport const selectContacts = state => state.phonebook.contacts.items;\nexport const selectIsLoading = state => state.phonebook.contacts.isLoading;\nexport const selectError = state => state.phonebook.contacts.error;\nexport const selectFilter = state => state.filter;\n\n// export const selectFilteredContacts = state => {\n//   const contacts = selectContacts(state);\n//   const filter = selectFilter(state);\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase())\n//   );\n// };\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter], // Input selectors\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import { useState } from 'react';\nimport {\n  Button,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts, addContact } from '../../redux/contacts/operations';\nimport { selectContacts, selectIsLoading } from '../../redux/contacts/selectors';\nimport { showErrorToast, showSuccessToast } from '../../utils/messages';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const handleChange = (event) => {\n    event.preventDefault()\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        const isNameExists = contacts.some(\n          (contact) => value.toLowerCase() === contact.name.toLowerCase()\n        );\n        if (isNameExists) {\n          showErrorToast(`Sorry ${value} already exist!`);\n          return;\n        }\n        setName(value);\n        break;\n\n      case 'number':\n      const isNumberExists = contacts.some(\n        (contact) => value.toLowerCase() === contact.number.toLowerCase()\n      );\n      if (isNumberExists) {\n        showErrorToast(`Sorry ${value} already exist!`);\n        return;\n      }\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const newContact = () => {\n    const contact = {\n      name,\n      number,\n    };\n    try {\n      dispatch(addContact(contact));\n      // console.log('contact', contact)\n      showSuccessToast(`Contact: ${contact.name} is added to your book`)\n      reset();\n    } catch (error) {\n      console.log('error', error);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!name || !number) {\n      showErrorToast('Please fill in all fields');\n      return;\n    }\n    newContact();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <Stack spacing={2} mb={4}>\n          <InputGroup>\n            <InputLeftAddon children=\"Name:\" w=\"5.2rem\" fontSize=\"1em\" />\n            <Input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              placeholder=\"Enter name\"\n              w=\"17rem\"\n              fontSize=\"1em\"\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputLeftAddon children=\"Number:\" w=\"5.2rem\" fontSize=\"1em\" />\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              placeholder=\"Enter phone number\"\n              w=\"17rem\"\n              fontSize=\"1em\"\n            />\n          </InputGroup>\n          <Button type=\"submit\" disabled={isLoading} fontSize=\"l\">\n            Add contact\n          </Button>\n        </Stack>\n      </form>\n    </>\n  );\n};","import { Filter } from '../components/Filter/Filter';\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilteredContacts,\n} from '../redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { Flex, Heading } from '@chakra-ui/layout';\nimport { useColorModeValue } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const bgColor = useColorModeValue('gray.50', 'gray.700');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilteredContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Flex\n      name=\"flex\"\n      direction=\"column\"\n      align=\"center\"\n      pt={10}\n      px={10}\n      bg={bgColor}\n      h=\"100%\"\n    >\n      <Heading\n  as={'h1'}\n  fontSize={'2xl'}\n  display=\"flex\"\n  alignItems=\"flex-end\"\n  mb={2}\n>\n  Phonebook\n \n</Heading>\n  <ContactForm />\n      \n      <Filter />\n      <div title={`Contacts list`}>\n        {isLoading && <p>Loading contacts...</p>}\n        {error && <p>{error}</p>}\n        {contacts.length > 0 && \n        <ContactsList contacts={filter} />\n        }\n      </div>\n    </Flex>\n  );\n}"],"names":["Filter","dispatch","useDispatch","children","fontSize","I","type","name","placeholder","onChange","e","filterChange","currentTarget","value","mb","UpdateForm","handleUpdate","updatedName","updatedNumber","handleChange","onClose","as","spacing","onSubmit","pb","w","pattern","title","required","colorScheme","mr","onClick","ContactsListItem","contact","number","id","initialRef","contacts","useRef","finalRef","useState","isOpen","setIsOpen","setUpdatedName","setUpdatedNumber","alignItems","ml","md","lg","fontWeight","size","color","deleteContact","showSuccessToast","initialFocusRef","finalFocusRef","event","preventDefault","form","target","updateContact","reset","ContactsList","base","map","display","selectContacts","state","phonebook","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","toLowerCase","includes","ContactForm","useSelector","setName","setNumber","some","showErrorToast","useEffect","fetchContacts","addContact","console","log","newContact","disabled","ContactsPage","bgColor","useColorModeValue","direction","align","pt","px","bg","h","length"],"sourceRoot":""}